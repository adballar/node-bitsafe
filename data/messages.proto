import "nanopb.proto";

// Responses: PingResponse
message Ping
{
	optional string greeting = 1;
}

// Responses: none
message PingResponse
{
	required string version = 1;
}

// Responses: none
message Success
{
}

// Responses: none
message Failure
{
	required string error_message = 1;
}

// Interjection sent from the device to the host specifying that a button
// press (on the device) is required in order to continue.
// Responses: ButtonAck or ButtonCancel
message ButtonRequest
{
}

// Host grants permission for device to wait for button press.
message ButtonAck
{
}

// Host denies permission for device to wait for button press. This will
// probably cause the current action to be cancelled.
message ButtonCancel
{
}

// Interjection sent from the device to the host specifying that an action
// requires a password to be submitted to the device.
message PinRequest
{
}

// Host submits password to the device.
message PinAck
{
	required bytes password = 1;
}

// Host does not want to submit password to the device.
message PinCancel
{
}

// Responses: Success or Failure
// Response interjections: ButtonRequest
// wallet_name is stored purely for the convenience of the host. It should be
// a null-terminated UTF-8 encoded string with a maximum length of 40 bytes.
// To create an unencrypted wallet, exclude password.
message NewWallet
{
	optional uint32 wallet_number = 1 [default = 0];
	optional bytes password = 2;
	optional bytes wallet_name = 3 [(nanopb).max_size = 40];
	optional bool is_hidden = 4 [default = false];
}

// Responses: Address or Failure
// Response interjections: ButtonRequest
message NewAddress
{
}

// Responses: none
message Address
{
	required uint32 address_handle = 1;
	required bytes public_key = 2 [(nanopb).max_size = 65];
	required bytes address = 3 [(nanopb).max_size = 20];
}

// Responses: NumberOfAddresses or Failure
message GetNumberOfAddresses
{
}

// Responses: none
message NumberOfAddresses
{
	required uint32 number_of_addresses = 1;
}

// Responses: Address or Failure
message GetAddressAndPublicKey
{
	required uint32 address_handle = 1;
}

// Responses: Signature or Failure
// Response interjections: ButtonRequest
message SignTransaction
{
	required uint32 address_handle = 1;
	required bytes transaction_data = 2;
}

// Responses: none
message Signature
{
	required bytes signature_data = 1 [(nanopb).max_size = 73];
}

// Responses: Success or Failure
// Response interjections: PinRequest
message LoadWallet
{
	optional uint32 wallet_number = 1 [default = 0];
}

// Responses: Success or Failure
message UnloadWallet
{
}

// Responses: Success or Failure
// Response interjections: ButtonRequest
message FormatWalletArea
{
	required bytes initial_entropy_pool = 1 [(nanopb).max_size = 32];
}

// Responses: Success or Failure
// Response interjections: ButtonRequest
// To change the current wallet into an unencrypted wallet,
// exclude password.
message ChangeEncryptionKey
{
	optional bytes password = 1;
}

// Responses: Success or Failure
// Response interjections: ButtonRequest
// wallet_name is stored purely for the convenience of the host. It should be
// a null-terminated UTF-8 encoded string with a maximum length of 40 bytes.
message ChangeWalletName
{
	required bytes wallet_name = 1 [(nanopb).max_size = 40];
}

// Responses: Wallets or Failure
message ListWallets
{
}

// Responses: none
message WalletInfo
{
	required uint32 wallet_number = 1;
	required uint32 version = 2;
	required bytes wallet_name = 3 [(nanopb).max_size = 40];
	required bytes wallet_uuid = 4 [(nanopb).max_size = 16];
}

// Responses: none
message Wallets
{
	repeated WalletInfo wallet_info = 1;
}

// Responses: Success or Failure
// Response interjections: ButtonRequest
message BackupWallet
{
	optional bool is_encrypted = 1 [default = false];
	optional uint32 device = 2 [default = 0];
}

// Responses: Success or Failure
// Response interjections: ButtonRequest
message RestoreWallet
{
	required NewWallet new_wallet = 1;
	required bytes seed = 2 [(nanopb).max_size = 64];
}

// Responses: DeviceUUID or Failure
message GetDeviceUUID
{
}

// Responses: none
message DeviceUUID
{
	required bytes device_uuid = 1 [(nanopb).max_size = 16];
}

// Responses: Entropy or Failure
message GetEntropy
{
	required uint32 number_of_bytes = 1;
}

// Responses: none
message Entropy
{
	required bytes entropy = 1;
}

// Responses: MasterPublicKey or Failure
// Response interjections: ButtonRequest
message GetMasterPublicKey
{
}

// Responses: none
message MasterPublicKey
{
	required bytes public_key = 1 [(nanopb).max_size = 65];
	required bytes chain_code = 2 [(nanopb).max_size = 32];
}
